### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Address {
  _id: ID!
  city: String!
  cover: UploadFile
  created_at: DateTime!
  id: ID!
  json: JSON
  postal_coder: String
  updated_at: DateTime!
}

type AddressEntity {
  attributes: Address
  id: ID
}

type AddressEntityResponse {
  data: AddressEntity
}

type AddressEntityResponseCollection {
  data: [AddressEntity!]!
  meta: ResponseCollectionMeta!
}

input AddressFiltersInput {
  AND: [AddressFiltersInput]
  NOT: AddressFiltersInput
  OR: [AddressFiltersInput]
  city: StringFilterInput
  cover: UploadFileFiltersInput
  created_by: AdminUserFiltersInput
  json: JSONFilterInput
  postal_coder: StringFilterInput
  updated_by: AdminUserFiltersInput
}

type AdminPermission {
  _id: ID!
  action: String!
  conditions: JSON
  createdAt: DateTime!
  id: ID!
  properties: JSON
  role: AdminRole
  subject: String
  updatedAt: DateTime!
}

type AdminPermissionEntity {
  attributes: AdminPermission
  id: ID
}

type AdminPermissionEntityResponse {
  data: AdminPermissionEntity
}

type AdminPermissionEntityResponseCollection {
  data: [AdminPermissionEntity!]!
  meta: ResponseCollectionMeta!
}

input AdminPermissionFiltersInput {
  AND: [AdminPermissionFiltersInput]
  NOT: AdminPermissionFiltersInput
  OR: [AdminPermissionFiltersInput]
  action: StringFilterInput
  conditions: JSONFilterInput
  properties: JSONFilterInput
  role: AdminRoleFiltersInput
  subject: StringFilterInput
}

type AdminRole {
  _id: ID!
  code: String!
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type AdminRoleEntity {
  attributes: AdminRole
  id: ID
}

type AdminRoleEntityResponse {
  data: AdminRoleEntity
}

type AdminRoleEntityResponseCollection {
  data: [AdminRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input AdminRoleFiltersInput {
  AND: [AdminRoleFiltersInput]
  NOT: AdminRoleFiltersInput
  OR: [AdminRoleFiltersInput]
  code: StringFilterInput
  description: StringFilterInput
  name: StringFilterInput
}

type AdminUser {
  _id: ID!
  firstname: String
  id: ID!
  lastname: String
  preferedLanguage: String
  username: String
}

type AdminUserEntity {
  attributes: AdminUser
  id: ID
}

type AdminUserEntityResponse {
  data: AdminUserEntity
}

type AdminUserEntityResponseCollection {
  data: [AdminUserEntity!]!
  meta: ResponseCollectionMeta!
}

input AdminUserFiltersInput {
  AND: [AdminUserFiltersInput]
  NOT: AdminUserFiltersInput
  OR: [AdminUserFiltersInput]
  blocked: BooleanFilterInput
  firstname: StringFilterInput
  isActive: BooleanFilterInput
  lastname: StringFilterInput
  preferedLanguage: StringFilterInput
  registrationToken: StringFilterInput
  resetPasswordToken: StringFilterInput
  username: StringFilterInput
}

input BooleanFilterInput {
  eq: Boolean
}

type Category {
  _id: ID!
  createdAt: DateTime!
  id: ID!
  name: String
  published_at: DateTime
  updatedAt: DateTime!
}

type CategoryEntity {
  attributes: Category
  id: ID
}

type CategoryEntityResponse {
  data: CategoryEntity
}

type CategoryEntityResponseCollection {
  data: [CategoryEntity!]!
  meta: ResponseCollectionMeta!
}

input CategoryFiltersInput {
  AND: [CategoryFiltersInput]
  NOT: CategoryFiltersInput
  OR: [CategoryFiltersInput]
  created_by: AdminUserFiltersInput
  name: StringFilterInput
  published_at: DateTimeFilterInput
  updated_by: AdminUserFiltersInput
}

input ClosingperiodFiltersInput {
  AND: [ClosingperiodFiltersInput]
  NOT: ClosingperiodFiltersInput
  OR: [ClosingperiodFiltersInput]
  end_date: DateFilterInput
  label: StringFilterInput
  media: UploadFileFiltersInput
  start_date: DateFilterInput
}

type ComponentBlogTestComo {
  _id: ID!
  id: ID!
  name: String
}

type ComponentDefaultClosingperiod {
  _id: ID!
  dish: ComponentDefaultDish
  end_date: Date!
  id: ID!
  label: String
  media: UploadFile
  start_date: Date!
}

type ComponentDefaultDish {
  _id: ID!
  id: ID!
  name: String
  picture: UploadFile
  price: Float
}

type ComponentDefaultOpeningtimes {
  _id: ID!
  dishrep: [ComponentDefaultDish]
  id: ID!
  label: String!
  time: String
}

type ComponentDefaultRestaurantservice {
  _id: ID!
  id: ID!
  is_available: Boolean!
  media: UploadFile
  name: String!
}

type Country {
  _id: ID!
  code: String
  created_at: DateTime!
  id: ID!
  name: String!
  updated_at: DateTime!
}

type CountryEntity {
  attributes: Country
  id: ID
}

type CountryEntityResponse {
  data: CountryEntity
}

type CountryEntityResponseCollection {
  data: [CountryEntity!]!
  meta: ResponseCollectionMeta!
}

input CountryFiltersInput {
  AND: [CountryFiltersInput]
  NOT: CountryFiltersInput
  OR: [CountryFiltersInput]
  code: StringFilterInput
  created_by: AdminUserFiltersInput
  name: StringFilterInput
  updated_by: AdminUserFiltersInput
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilterInput {
  eq: Date
  gt: Date
  lt: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  eq: DateTime
  gt: DateTime
  lt: DateTime
}

input DishFiltersInput {
  AND: [DishFiltersInput]
  NOT: DishFiltersInput
  OR: [DishFiltersInput]
  name: StringFilterInput
  picture: UploadFileFiltersInput
  price: FloatFilterInput
}

enum ENUM_RESTAURANT_PRICE_RANGE {
  average
  cheap
  expensive
  very_cheap
  very_expensive
}

input FloatFilterInput {
  eq: Float
  gt: Float
  lt: Float
}

type Homepage {
  _id: ID!
  createdAt: DateTime!
  id: ID!
  locale: String
  published_at: DateTime
  single: UploadFile
  title: String!
  updatedAt: DateTime!
}

type HomepageEntity {
  attributes: Homepage
  id: ID
}

type HomepageEntityResponse {
  data: HomepageEntity
}

input HomepageFiltersInput {
  AND: [HomepageFiltersInput]
  NOT: HomepageFiltersInput
  OR: [HomepageFiltersInput]
  created_by: AdminUserFiltersInput
  locale: StringFilterInput
  published_at: DateTimeFilterInput
  single: UploadFileFiltersInput
  title: StringFilterInput
  updated_by: AdminUserFiltersInput
}

type I18NLocale {
  _id: ID!
  code: String
  createdAt: DateTime!
  id: ID!
  name: String
  updatedAt: DateTime!
}

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  AND: [I18NLocaleFiltersInput]
  NOT: I18NLocaleFiltersInput
  OR: [I18NLocaleFiltersInput]
  code: StringFilterInput
  created_by: AdminUserFiltersInput
  name: StringFilterInput
  updated_by: AdminUserFiltersInput
}

input IDFilterInput {
  eq: ID
}

input IntFilterInput {
  eq: Int
  gt: Int
  lt: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JSONFilterInput {
  eq: JSON
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Like {
  _id: ID!
  address: Address
  authore: UsersPermissionsUser
  createdAt: DateTime!
  id: ID!
  review: Review
  updatedAt: DateTime!
}

type LikeEntity {
  attributes: Like
  id: ID
}

type LikeEntityResponse {
  data: LikeEntity
}

type LikeEntityResponseCollection {
  data: [LikeEntity!]!
  meta: ResponseCollectionMeta!
}

input LikeFiltersInput {
  AND: [LikeFiltersInput]
  NOT: LikeFiltersInput
  OR: [LikeFiltersInput]
  address: AddressFiltersInput
  authore: UsersPermissionsUserFiltersInput
  created_by: AdminUserFiltersInput
  review: ReviewFiltersInput
  updated_by: AdminUserFiltersInput
}

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

input LongFilterInput {
  eq: Long
  gt: Long
  lt: Long
}

type Menu {
  _id: ID!
  createdAt: DateTime!
  id: ID!
  restaurant: Restaurant
  updatedAt: DateTime!
}

type MenuEntity {
  attributes: Menu
  id: ID
}

type MenuEntityResponse {
  data: MenuEntity
}

type MenuEntityResponseCollection {
  data: [MenuEntity!]!
  meta: ResponseCollectionMeta!
}

input MenuFiltersInput {
  AND: [MenuFiltersInput]
  NOT: MenuFiltersInput
  OR: [MenuFiltersInput]
  created_by: AdminUserFiltersInput
  restaurant: RestaurantFiltersInput
  updated_by: AdminUserFiltersInput
}

type Menusection {
  _id: ID!
  created_at: DateTime!
  dishes: [ComponentDefaultDish]!
  id: ID!
  menu: Menu
  name: String!
  updated_at: DateTime!
}

type MenusectionEntity {
  attributes: Menusection
  id: ID
}

type MenusectionEntityResponse {
  data: MenusectionEntity
}

type MenusectionEntityResponseCollection {
  data: [MenusectionEntity!]!
  meta: ResponseCollectionMeta!
}

input MenusectionFiltersInput {
  AND: [MenusectionFiltersInput]
  NOT: MenusectionFiltersInput
  OR: [MenusectionFiltersInput]
  created_by: AdminUserFiltersInput
  menu: MenuFiltersInput
  name: StringFilterInput
  updated_by: AdminUserFiltersInput
}

type MypluginTest {
  _id: ID!
  id: ID!
  type: String!
}

type MypluginTestEntity {
  attributes: MypluginTest
  id: ID
}

type MypluginTestEntityResponse {
  data: MypluginTestEntity
}

type MypluginTestEntityResponseCollection {
  data: [MypluginTestEntity!]!
  meta: ResponseCollectionMeta!
}

input MypluginTestFiltersInput {
  AND: [MypluginTestFiltersInput]
  NOT: MypluginTestFiltersInput
  OR: [MypluginTestFiltersInput]
  created_by: AdminUserFiltersInput
  type: StringFilterInput
  updated_by: AdminUserFiltersInput
}

input OpeningtimeFiltersInput {
  AND: [OpeningtimeFiltersInput]
  NOT: OpeningtimeFiltersInput
  OR: [OpeningtimeFiltersInput]
  label: StringFilterInput
  time: StringFilterInput
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  addressEntities(filters: AddressFiltersInput, locale: String, publicationState: PublicationState = LIVE, sort: [String] = ["asc"]): AddressEntityResponseCollection
  addressEntity(id: IDFilterInput): AddressEntityResponse
  categoryEntities(filters: CategoryFiltersInput, locale: String, publicationState: PublicationState = LIVE, sort: [String] = ["asc"]): CategoryEntityResponseCollection
  categoryEntity(id: IDFilterInput): CategoryEntityResponse
  countryEntities(filters: CountryFiltersInput, locale: String, publicationState: PublicationState = LIVE, sort: [String] = ["asc"]): CountryEntityResponseCollection
  countryEntity(code: StringFilterInput, id: IDFilterInput): CountryEntityResponse
  homepageEntity(publicationState: PublicationState = LIVE): HomepageEntityResponse
  likeEntities(filters: LikeFiltersInput, locale: String, publicationState: PublicationState = LIVE, sort: [String] = ["asc"]): LikeEntityResponseCollection
  likeEntity(id: IDFilterInput): LikeEntityResponse
  menuEntities(filters: MenuFiltersInput, locale: String, publicationState: PublicationState = LIVE, sort: [String] = ["asc"]): MenuEntityResponseCollection
  menuEntity(id: IDFilterInput): MenuEntityResponse
  menusectionEntities(filters: MenusectionFiltersInput, locale: String, publicationState: PublicationState = LIVE, sort: [String] = ["asc"]): MenusectionEntityResponseCollection
  menusectionEntity(id: IDFilterInput): MenusectionEntityResponse
  mypluginTestEntities(filters: MypluginTestFiltersInput, locale: String, publicationState: PublicationState = LIVE, sort: [String] = ["asc"]): MypluginTestEntityResponseCollection
  mypluginTestEntity(id: IDFilterInput, type: StringFilterInput): MypluginTestEntityResponse
  restaurantEntities(filters: RestaurantFiltersInput, locale: String, publicationState: PublicationState = LIVE, sort: [String] = ["asc"]): RestaurantEntityResponseCollection
  restaurantEntity(id: IDFilterInput): RestaurantEntityResponse
  reviewEntities(filters: ReviewFiltersInput, locale: String, publicationState: PublicationState = LIVE, sort: [String] = ["asc"]): ReviewEntityResponseCollection
  reviewEntity(id: IDFilterInput): ReviewEntityResponse
  usersPermissionsUserEntities(filters: UsersPermissionsUserFiltersInput, locale: String, publicationState: PublicationState = LIVE, sort: [String] = ["asc"]): UsersPermissionsUserEntityResponseCollection
  usersPermissionsUserEntity(id: IDFilterInput, username: StringFilterInput): UsersPermissionsUserEntityResponse
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

type Restaurant {
  _id: ID!
  address: Address
  averagePrice: Float
  closing_period: ComponentDefaultClosingperiod
  cover: UploadFile
  created_at: DateTime!
  dz: restaurantDzDynamicZone
  id: ID!
  locale: String
  menu: Menu
  name: String!
  opening_times: [ComponentDefaultOpeningtimes]
  price_range: ENUM_RESTAURANT_PRICE_RANGE
  published_at: DateTime
  services: [ComponentDefaultRestaurantservice]
  since: Date
  stars: Int!
  timestamp: DateTime
  updated_at: DateTime!
}

type RestaurantEntity {
  attributes: Restaurant
  id: ID
}

type RestaurantEntityResponse {
  data: RestaurantEntity
}

type RestaurantEntityResponseCollection {
  data: [RestaurantEntity!]!
  meta: ResponseCollectionMeta!
}

input RestaurantFiltersInput {
  AND: [RestaurantFiltersInput]
  NOT: RestaurantFiltersInput
  OR: [RestaurantFiltersInput]
  address: AddressFiltersInput
  averagePrice: FloatFilterInput
  cover: UploadFileFiltersInput
  created_by: AdminUserFiltersInput
  locale: StringFilterInput
  menu: MenuFiltersInput
  name: StringFilterInput
  published_at: DateTimeFilterInput
  since: DateFilterInput
  stars: IntFilterInput
  timestamp: DateTimeFilterInput
  updated_by: AdminUserFiltersInput
}

input RestaurantserviceFiltersInput {
  AND: [RestaurantserviceFiltersInput]
  NOT: RestaurantserviceFiltersInput
  OR: [RestaurantserviceFiltersInput]
  is_available: BooleanFilterInput
  media: UploadFileFiltersInput
  name: StringFilterInput
}

type Review {
  _id: ID!
  author: UsersPermissionsUser
  created_at: DateTime!
  id: ID!
  rating: Int!
  restaurant: Restaurant
  updated_at: DateTime!
}

type ReviewEntity {
  attributes: Review
  id: ID
}

type ReviewEntityResponse {
  data: ReviewEntity
}

type ReviewEntityResponseCollection {
  data: [ReviewEntity!]!
  meta: ResponseCollectionMeta!
}

input ReviewFiltersInput {
  AND: [ReviewFiltersInput]
  NOT: ReviewFiltersInput
  OR: [ReviewFiltersInput]
  author: UsersPermissionsUserFiltersInput
  created_by: AdminUserFiltersInput
  rating: IntFilterInput
  restaurant: RestaurantFiltersInput
  updated_by: AdminUserFiltersInput
}

input StringFilterInput {
  contains: String
  endsWith: String
  eq: String
  startsWith: String
}

input TestComoFiltersInput {
  AND: [TestComoFiltersInput]
  NOT: TestComoFiltersInput
  OR: [TestComoFiltersInput]
  name: StringFilterInput
}

"""A time string with format HH:mm:ss.SSS"""
scalar Time

input TimeFilterInput {
  eq: Time
  gt: Time
  lt: Time
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  alternativeText: String
  caption: String
  createdAt: DateTime!
  ext: String
  formats: JSON
  hash: String!
  height: Int
  id: ID!
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  size: Float!
  updatedAt: DateTime!
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  AND: [UploadFileFiltersInput]
  NOT: UploadFileFiltersInput
  OR: [UploadFileFiltersInput]
  alternativeText: StringFilterInput
  caption: StringFilterInput
  created_by: AdminUserFiltersInput
  ext: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updated_by: AdminUserFiltersInput
  url: StringFilterInput
  width: IntFilterInput
}

type UsersPermissionsPermission {
  _id: ID!
  action: String!
  controller: String!
  enabled: Boolean!
  id: ID!
  policy: String
  role: UsersPermissionsRole
  type: String!
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

type UsersPermissionsPermissionEntityResponse {
  data: UsersPermissionsPermissionEntity
}

type UsersPermissionsPermissionEntityResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  AND: [UsersPermissionsPermissionFiltersInput]
  NOT: UsersPermissionsPermissionFiltersInput
  OR: [UsersPermissionsPermissionFiltersInput]
  action: StringFilterInput
  controller: StringFilterInput
  created_by: AdminUserFiltersInput
  enabled: BooleanFilterInput
  policy: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  type: StringFilterInput
  updated_by: AdminUserFiltersInput
}

type UsersPermissionsRole {
  _id: ID!
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  AND: [UsersPermissionsRoleFiltersInput]
  NOT: UsersPermissionsRoleFiltersInput
  OR: [UsersPermissionsRoleFiltersInput]
  created_by: AdminUserFiltersInput
  description: StringFilterInput
  name: StringFilterInput
  type: StringFilterInput
  updated_by: AdminUserFiltersInput
}

type UsersPermissionsUser {
  _id: ID!
  blocked: Boolean
  confirmed: Boolean
  created_at: DateTime!
  id: ID!
  picture: UploadFile
  provider: String
  role: UsersPermissionsRole
  updated_at: DateTime!
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  AND: [UsersPermissionsUserFiltersInput]
  NOT: UsersPermissionsUserFiltersInput
  OR: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  created_by: AdminUserFiltersInput
  picture: UploadFileFiltersInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  updated_by: AdminUserFiltersInput
  username: StringFilterInput
}

union restaurantDzDynamicZone = ComponentDefaultClosingperiod | ComponentDefaultDish | ComponentDefaultOpeningtimes | ComponentDefaultRestaurantservice

scalar restaurantDzDynamicZoneInput
