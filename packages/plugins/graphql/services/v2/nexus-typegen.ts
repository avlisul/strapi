/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * A time string with format HH:mm:ss.SSS
     */
    time<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Time";
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
    /**
     * The `Long` scalar type represents 52-bit integers
     */
    long<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Long";
    /**
     * The `Upload` scalar type represents a file upload.
     */
    upload<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Upload";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * A time string with format HH:mm:ss.SSS
     */
    time<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Time";
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
    /**
     * The `Long` scalar type represents 52-bit integers
     */
    long<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Long";
    /**
     * The `Upload` scalar type represents a file upload.
     */
    upload<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Upload";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  ENUM_RESTAURANT_PRICE_RANGE: "average" | "cheap" | "expensive" | "very_cheap" | "very_expensive"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
  DateTime: any
  JSON: any
  JSONObject: any
  Long: any
  Time: any
  Upload: any
}

export interface NexusGenObjects {
  Address: { // root type
    city: string; // String!
    json?: NexusGenScalars['JSON'] | null; // JSON
    postal_coder?: string | null; // String
  }
  Category: { // root type
    name?: string | null; // String
    published_at?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Country: { // root type
    code?: string | null; // String
    name: string; // String!
  }
  File: { // root type
    alternativeText?: string | null; // String
    caption?: string | null; // String
    ext?: string | null; // String
    formats?: NexusGenScalars['JSON'] | null; // JSON
    hash: string; // String!
    height?: number | null; // Int
    mime: string; // String!
    name: string; // String!
    previewUrl?: string | null; // String
    provider: string; // String!
    provider_metadata?: NexusGenScalars['JSON'] | null; // JSON
    size: number; // Float!
    url: string; // String!
    width?: number | null; // Int
  }
  Homepage: { // root type
    locale?: string | null; // String
    published_at?: NexusGenScalars['DateTime'] | null; // DateTime
    title: string; // String!
  }
  Like: {};
  Locale: { // root type
    code?: string | null; // String
    name?: string | null; // String
  }
  Menu: {};
  Menusection: { // root type
    name: string; // String!
  }
  Pagination: {};
  Permission: { // root type
    action: string; // String!
    controller: string; // String!
    enabled: boolean; // Boolean!
    policy?: string | null; // String
    type: string; // String!
  }
  Query: {};
  Restaurant: { // root type
    averagePrice?: number | null; // Float
    locale?: string | null; // String
    name: string; // String!
    price_range?: NexusGenEnums['ENUM_RESTAURANT_PRICE_RANGE'] | null; // ENUM_RESTAURANT_PRICE_RANGE
    published_at?: NexusGenScalars['DateTime'] | null; // DateTime
    since?: NexusGenScalars['Date'] | null; // Date
    stars: number; // Int!
    timestamp?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Review: { // root type
    rating: number; // Int!
  }
  Role: { // root type
    description?: string | null; // String
    name: string; // String!
    type?: string | null; // String
  }
  Test: { // root type
    type: string; // String!
  }
  User: { // root type
    blocked?: boolean | null; // Boolean
    confirmed?: boolean | null; // Boolean
    provider?: string | null; // String
    username: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Address: { // field return type
    city: string; // String!
    cover: NexusGenRootTypes['File'] | null; // File
    json: NexusGenScalars['JSON'] | null; // JSON
    postal_coder: string | null; // String
  }
  Category: { // field return type
    name: string | null; // String
    published_at: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Country: { // field return type
    code: string | null; // String
    name: string; // String!
  }
  File: { // field return type
    alternativeText: string | null; // String
    caption: string | null; // String
    ext: string | null; // String
    formats: NexusGenScalars['JSON'] | null; // JSON
    hash: string; // String!
    height: number | null; // Int
    mime: string; // String!
    name: string; // String!
    previewUrl: string | null; // String
    provider: string; // String!
    provider_metadata: NexusGenScalars['JSON'] | null; // JSON
    size: number; // Float!
    url: string; // String!
    width: number | null; // Int
  }
  Homepage: { // field return type
    locale: string | null; // String
    published_at: NexusGenScalars['DateTime'] | null; // DateTime
    single: NexusGenRootTypes['File'] | null; // File
    title: string; // String!
  }
  Like: { // field return type
    address: NexusGenRootTypes['Address'] | null; // Address
    authore: NexusGenRootTypes['User'] | null; // User
    review: NexusGenRootTypes['Review'] | null; // Review
  }
  Locale: { // field return type
    code: string | null; // String
    name: string | null; // String
  }
  Menu: { // field return type
    restaurant: NexusGenRootTypes['Restaurant'] | null; // Restaurant
  }
  Menusection: { // field return type
    menu: NexusGenRootTypes['Menu'] | null; // Menu
    name: string; // String!
  }
  Pagination: { // field return type
    page: number; // Int!
    pageCount: number; // Int!
    pageSize: number; // Int!
    total: number; // Int!
  }
  Permission: { // field return type
    action: string; // String!
    controller: string; // String!
    enabled: boolean; // Boolean!
    policy: string | null; // String
    role: NexusGenRootTypes['Role'] | null; // Role
    type: string; // String!
  }
  Query: { // field return type
    address: NexusGenRootTypes['Address'] | null; // Address
    addresses: NexusGenRootTypes['Address'][]; // [Address!]!
    categories: NexusGenRootTypes['Category'][]; // [Category!]!
    category: NexusGenRootTypes['Category'] | null; // Category
    countries: NexusGenRootTypes['Country'][]; // [Country!]!
    country: NexusGenRootTypes['Country'] | null; // Country
    like: NexusGenRootTypes['Like'] | null; // Like
    likes: NexusGenRootTypes['Like'][]; // [Like!]!
    menu: NexusGenRootTypes['Menu'] | null; // Menu
    menus: NexusGenRootTypes['Menu'][]; // [Menu!]!
    menusection: NexusGenRootTypes['Menusection'] | null; // Menusection
    menusections: NexusGenRootTypes['Menusection'][]; // [Menusection!]!
    restaurant: NexusGenRootTypes['Restaurant'] | null; // Restaurant
    restaurants: NexusGenRootTypes['Restaurant'][]; // [Restaurant!]!
    review: NexusGenRootTypes['Review'] | null; // Review
    reviews: NexusGenRootTypes['Review'][]; // [Review!]!
  }
  Restaurant: { // field return type
    address: NexusGenRootTypes['Address'] | null; // Address
    averagePrice: number | null; // Float
    cover: NexusGenRootTypes['File'] | null; // File
    locale: string | null; // String
    menu: NexusGenRootTypes['Menu'] | null; // Menu
    name: string; // String!
    price_range: NexusGenEnums['ENUM_RESTAURANT_PRICE_RANGE'] | null; // ENUM_RESTAURANT_PRICE_RANGE
    published_at: NexusGenScalars['DateTime'] | null; // DateTime
    since: NexusGenScalars['Date'] | null; // Date
    stars: number; // Int!
    timestamp: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Review: { // field return type
    author: NexusGenRootTypes['User'] | null; // User
    rating: number; // Int!
    restaurant: NexusGenRootTypes['Restaurant'] | null; // Restaurant
  }
  Role: { // field return type
    description: string | null; // String
    name: string; // String!
    type: string | null; // String
  }
  Test: { // field return type
    type: string; // String!
  }
  User: { // field return type
    blocked: boolean | null; // Boolean
    confirmed: boolean | null; // Boolean
    picture: NexusGenRootTypes['File'] | null; // File
    provider: string | null; // String
    role: NexusGenRootTypes['Role'] | null; // Role
    username: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Address: { // field return type name
    city: 'String'
    cover: 'File'
    json: 'JSON'
    postal_coder: 'String'
  }
  Category: { // field return type name
    name: 'String'
    published_at: 'DateTime'
  }
  Country: { // field return type name
    code: 'String'
    name: 'String'
  }
  File: { // field return type name
    alternativeText: 'String'
    caption: 'String'
    ext: 'String'
    formats: 'JSON'
    hash: 'String'
    height: 'Int'
    mime: 'String'
    name: 'String'
    previewUrl: 'String'
    provider: 'String'
    provider_metadata: 'JSON'
    size: 'Float'
    url: 'String'
    width: 'Int'
  }
  Homepage: { // field return type name
    locale: 'String'
    published_at: 'DateTime'
    single: 'File'
    title: 'String'
  }
  Like: { // field return type name
    address: 'Address'
    authore: 'User'
    review: 'Review'
  }
  Locale: { // field return type name
    code: 'String'
    name: 'String'
  }
  Menu: { // field return type name
    restaurant: 'Restaurant'
  }
  Menusection: { // field return type name
    menu: 'Menu'
    name: 'String'
  }
  Pagination: { // field return type name
    page: 'Int'
    pageCount: 'Int'
    pageSize: 'Int'
    total: 'Int'
  }
  Permission: { // field return type name
    action: 'String'
    controller: 'String'
    enabled: 'Boolean'
    policy: 'String'
    role: 'Role'
    type: 'String'
  }
  Query: { // field return type name
    address: 'Address'
    addresses: 'Address'
    categories: 'Category'
    category: 'Category'
    countries: 'Country'
    country: 'Country'
    like: 'Like'
    likes: 'Like'
    menu: 'Menu'
    menus: 'Menu'
    menusection: 'Menusection'
    menusections: 'Menusection'
    restaurant: 'Restaurant'
    restaurants: 'Restaurant'
    review: 'Review'
    reviews: 'Review'
  }
  Restaurant: { // field return type name
    address: 'Address'
    averagePrice: 'Float'
    cover: 'File'
    locale: 'String'
    menu: 'Menu'
    name: 'String'
    price_range: 'ENUM_RESTAURANT_PRICE_RANGE'
    published_at: 'DateTime'
    since: 'Date'
    stars: 'Int'
    timestamp: 'DateTime'
  }
  Review: { // field return type name
    author: 'User'
    rating: 'Int'
    restaurant: 'Restaurant'
  }
  Role: { // field return type name
    description: 'String'
    name: 'String'
    type: 'String'
  }
  Test: { // field return type name
    type: 'String'
  }
  User: { // field return type name
    blocked: 'Boolean'
    confirmed: 'Boolean'
    picture: 'File'
    provider: 'String'
    role: 'Role'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}